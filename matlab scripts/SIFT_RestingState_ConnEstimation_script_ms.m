%%%  author: SK
%%%  date: 28/03/2024
%%%  reference :"Neural effects of dopaminergic compounds revealed by multi-site electrophysiology in mice and interpretable machine-learning"

clear all; close all; clc;

%%Specify the directory to save data
save_dir = 'E:\WT Pharmacology Results 2023\SIFT 1KHz Arfit 10s5s';

%%Specify the path of eeglab
addpath(genpath('D:\eeglab2020_0'))

%%Provide directory for Raw Ephys mat files
[FileList] = dir(fullfile('\\Mat files directory', '*.mat'));

for Fname = 1:length(FileList)    

    load(strcat(FileList(Fname).folder, '\', FileList(Fname).name));
    MouseID = Ephys.MouseID;
    ExptDay = Ephys.ExptDetails.Day;   
    data = Ephys.PP_Data.data'; %% data dim should be [Times X Channels]

    %%% Collect PreIjn and PostInj time stamps from TTL data
    Pre_Inj_Start  = Ephys.TimeStamps.Pre_Inj_Start;
    Post_Inj_Start = Ephys.TimeStamps.Post_Inj_Start;

    pre_inj_data  = data(Pre_Inj_Start:(Pre_Inj_Start+round(1000*60*10)-1),:);
    post_inj_data = data(Post_Inj_Start:Post_Inj_Start+round((1000*60*50)-1),:);
    final_data = cat(1, pre_inj_data,post_inj_data)';
       

    %% Meta info about data
    dataformat = 'matlab';      %% Input data format array is a Matlab array in the global workspace.
    srate      = 1000;          %% Data sampling rate in Hz {default: 1Hz}
    subject    = Ephys.MouseID; %% {default: none -> each dataset from a different subject}
    condition  = '';            %% task condition. For example, Targets{default: none -> all datasets from one condition}
    group      = ' ';           %% subject group. For example Patients or Control.{default: none -> all subjects in one group}
    session    = '';            %% session number (from the same subject). All datasets from the same subject and session will be assumed to use the
    nbchan     = size(data1,1); %% Number of data channels. 
    xmin       = 0;             %% Data epoch start time (in seconds).{default: 0}
    pnts       = size(data1,2); %% Number of data points per data epoch. The number of trial

    %%-------------------------------------------------------------------------------------------------------------
    %% Create EEGLab data str
    EEG = pop_importdata( 'data',final_data, 'dataformat','matlab', 'subject',subject,...
        'condition',condition, 'group',group, 'nbchan',nbchan,...
        'xmin',xmin, 'pnts',pnts, 'session',session, 'srate',srate); 

    %%%Check EEG data structure
    EEG = eeg_checkset(EEG); 

    %% Basic parameters to estimate SIFT connectivity
    WindowLengthSec    = 20;
    WindowStepSizeSec  = 20;        
    algorithm          = 'ARfit';   %%Vieira-Morf or  ARfit
    windowingType      = 'rectwin'; %%'rectwin' or 'hamming' or 'blackmanharris'
    detrend_method     = 'linear';
    normalise_method   = {'time'};     
    connmethods        = {'mCoh' 'Coh' 'iCoh' 'ffDTF' 'GPDC' 'RPDC' 'GGC' 'DTF' 'dDTF' 'dDTF08' };
    GUI_MODE           = 'nogui';
    VERBOSITY_LEVEL    = 0;


    elec_comp = [1,2,3,4,5,6,7]; %initialize channel array to collect good channels   
    
    %%%%%%%------------------------------------------------------------------------------------------------
    %% Pre-Processing the data
    [EEG] = pop_pre_prepData(EEG,GUI_MODE, ...
            'VerbosityLevel',VERBOSITY_LEVEL,   ...
            'SignalType',{'Channels'},  ...
            'VariableNames',elec_comp,   ...
            'NormalizeData',    ...
            {'verb' 0       ...
            'method' normalise_method},   ...
             'Detrend',  ...
            {'verb' VERBOSITY_LEVEL ...
            'method' {detrend_method}},  ...
            'resetConfigs',true,    ...
            'badsegments',[],       ...
            'newtrials',[],         ...
            'equalizetrials',false);

    disp('MODEL ORDER IDENTIFICATION');    

    %% compute model order selection criteria...
    EEG = pop_est_selModelOrder(EEG,GUI_MODE, ...
            'modelingApproach',         ...
                {'Segmentation VAR'     ...
                    'algorithm' {algorithm} ...
                    'winStartIdx' []    ...
                    'winlen'  WindowLengthSec    ...
                    'winstep' WindowStepSizeSec  ...
                    'taperfcn' windowingType   ... 
                    'epochTimeLims' []      ...
                    'prctWinToSample' 100   ...
                    'normalize' []          ...
                    'detrend' {'method' detrend_method} ...
                    'verb' VERBOSITY_LEVEL},      ...
            'morderRange',[1 30] ,  ... 
            'downdate',true,        ...
            'runPll',[],            ...
            'icselector',{'sbc' 'aic' 'fpe' 'hq'},  ...
            'winStartIdx',[],       ...
            'epochTimeLims',[],     ...
            'prctWinToSample',100,   ...
            'plot', [], ...
            'verb',VERBOSITY_LEVEL);

    % To plot the results, use this:
    % The first input must be structure! Confirmed with vis_plotOrderCriteria() line 57 by GUI (04/18/2021 Makoto)
    handles = vis_plotOrderCriteria(EEG.CAT.IC, struct('conditions', [],...
        'icselector', {{'sbc','aic','fpe','hq'}},...
        'minimizer', {{'min'}},...
        'prclim', 90));

    %%%Get model order from var model
    ModelOrder = ceil(mean(EEG(1).CAT.IC.hq.popt)); %% Can use elbow as well

    disp(ModelOrder)    
    disp('===================================')
    disp('MODEL FITTING');

    %%%% Here we can check that our selected parameters make sense
    fprintf('===================================================\n');
    fprintf('MVAR PARAMETER SUMMARY FOR CONDITION: %s\n',EEG.condition);
    fprintf('===================================================\n');
    est_dispMVARParamCheck(EEG,struct('morder',ModelOrder','winlen',WindowLengthSec,'winstep',WindowStepSizeSec,'verb',VERBOSITY_LEVEL));

    [EEG] = pop_est_fitMVAR(EEG,GUI_MODE, ...
        EEG.CAT.configs.est_selModelOrder.modelingApproach, ...
        'ModelOrder',ModelOrder);       

    disp('===================================')

    disp('MODEL VALIDATION');

    %%%% Here we assess the quality of the fit of our model w.r.t. the data. This step can be slow.
    %%%% We can obtain statistics for residual whiteness, percent consistency, and model stability ...
    [EEG] = pop_est_validateMVAR(EEG,GUI_MODE,...
                                'checkWhiteness', ...
                                    {'alpha' 0.05 ...
                                     'statcorrection' 'none' ...
                                     'numAcfLags' 50         ...
                                     'whitenessCriteria' {'Ljung-Box' 'ACF' 'Box-Pierce' 'Li-McLeod'} ...
                                     'winStartIdx' [] ...
                                     'prctWinToSample' 100  ...
                                     'verb' 0}, ...
                                 'checkResidualVariance',...
                                    {'alpha' 0.05 ...
                                     'statcorrection' 'none' ...
                                     'numAcfLags' 50    ...
                                     'whitenessCriteria' {}  ...
                                     'winStartIdx' []        ...
                                     'prctWinToSample' 100   ...
                                     'verb' 0}, ...
                                 'checkConsistency',    ...
                                    {'winStartIdx' []   ...
                                     'prctWinToSample' 100 ...
                                     'Nr' []                ...
                                     'donorm' 0         ...
                                     'nlags' []         ...
                                     'verb' 0}, ...
                                 'checkStability',  ...
                                    {'winStartIdx' []   ...
                                     'prctWinToSample' 100 ...
                                     'verb' 0},     ...
                                 'prctWinToSample',70,  ...
                                 'winStartIdx',[],      ...
                                 'verb',VERBOSITY_LEVEL,...
                                 'plot',false);

    handles = [];
    for k=1:length(EEG)
        handles(k) = vis_plotModelValidation({EEG(k).CAT.VALIDATION.whitestats},...
            {EEG(k).CAT.VALIDATION.PCstats},...
            {EEG(k).CAT.VALIDATION.stabilitystats});
    end

    %% STEP 7: Compute Connectivity
    disp('===================================')
    disp('CONNECTIVITY ESTIMATION');

    freqs = 1:200;

    [EEG] = pop_est_mvarConnectivity(EEG,GUI_MODE, ...
                'connmethods',connmethods, ... 
                'absvalsq',true,           ...
                'spectraldecibels',true,   ...
                'freqs',freqs, ...
                'verb',VERBOSITY_LEVEL);  
 
    Ephys.SIFT   = EEG.CAT;   
    
    %%%Can be changed accordingly
    FileName    = strcat(Ephys.MouseID,'_',Ephys.ExptDetails.Experiment,...
        '_SIFT_1KHz_20s20s_Arfit_', Ephys.ExptDetails.Inj_Day);
    
    %%%Save data to directoty
    save(fullfile(save_dir,FileName),'Ephys', '-v7.3');      
    disp("Data saved to drive")
end

